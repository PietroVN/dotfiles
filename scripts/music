#!/usr/bin/env bash
#
# Simple Music Script
# By: PietroVN
# Requirements: youtube-dl (Play songs from links), mpv (Playing songs), socat (Sending commands to mpv)
# Usage:
# 	music <command>
# 	seek  <time>
# 	advance (will advance music 5 seconds)
# 	return (will return music 5 seconds)
#	pause
# 	loop
# 	quit
# 	stop
# 	e.g music play hollow knight ost

# get args (music name | command)
COMMAND=$@

# Commands
run_command () {
		# Quit / Stop
		if [[ ${COMMAND} == "quit" || ${COMMAND} == "stop" ]]; then
				echo '{ "command": ["quit"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
				echo "Music stopped"
				if [[ -f ${XDG_RUNTIME_DIR}/mpvpause ]]; then
					rm ${XDG_RUNTIME_DIR}/mpvpause
				fi
		fi

		# Seek
		if [[ ${COMMAND} == *"seek"* ]]; then
			sed "s/SEEK/$(echo ${COMMAND} | awk '{print $2}')/g" <<< '{ "command": ["set_property", "playback-time", "SEEK"] }'  | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
		fi

		# Advance
		if [[ ${COMMAND} == "advance" ]]; then
			echo '{ "command": ["seek", "+5"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
			echo "Advanced: 5 seconds"
		fi

		# Return
		if [[ ${COMMAND} == "return" ]]; then
			echo '{ "command": ["seek", "-5"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
			echo "Returned: 5 seconds"
		fi

		# Pause
		if [[ ${COMMAND} == "pause" ]]; then
		
				# Checks to determine if music will be paused or played
				if [[ ! -f ${XDG_RUNTIME_DIR}/mpvpause ]]; then
					PAUSE=yes
				elif [[ $(cat ${XDG_RUNTIME_DIR}/mpvpause) == "yes" ]]; then
					PAUSE=no
				else
					PAUSE=yes
				fi

				# Apply
				sed "s/STATE/${PAUSE}/g" <<<'{ "command": ["set_property", "pause", "STATE"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
				
				# Save pause state
				echo ${PAUSE} > ${XDG_RUNTIME_DIR}/mpvpause

				# Informs the user
				echo "Pause: ${PAUSE}"
		fi

		# Play
		if [[ ${COMMAND} == *"play"* ]]; then
		
				# Delete mpvsocket
				if [[ -f ${XDG_RUNTIME_DIR}/mpvsocket ]]; then
					rm ${XDG_RUNTIME_DIR}/mpvsocket
				fi

				# End already running mpv process
				if [[ $(pidof mpv) ]]; then
						killall mpv
				fi

				# Remove the play word from the command
				COMMAND=$(sed s/play//g <<< ${COMMAND})
				
				# Check if user is using song name or url
				if [[ ${COMMAND} !=  *"https"* ]]; then
						SEARCH_MODE=NAME
				else
						SEARCH_MODE=URL
				fi

				# Play song
				if [[ ${SEARCH_MODE} == "NAME" ]]; then
					mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket $(youtube-dl --get-url ytsearch:"${COMMAND}") &
				else
					mpv --no-terminal --no-video --input-ipc-server=${XDG_RUNTIME_DIR}/mpvsocket ${COMMAND} &
				fi

				# Wait for mpv start
				sleep 5

				# Re-enable previous options
				if [[ -f ${XDG_RUNTIME_DIR}/mpvloop && $(cat ${XDG_RUNTIME_DIR}/mpvloop) == "yes" ]]; then
					echo '{ "command": ["set_property", "loop", "yes"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
				fi
				
				# Informs the user
				if [[ ${SEARCH_MODE} == "NAME" ]]; then
					echo "Now playing:    $(youtube-dl --get-title ytsearch:"${COMMAND}")"
					echo "Music Duration: $(youtube-dl --get-duration ytsearch:"${COMMAND}")"
				else
					echo "Now playing:    $(youtube-dl --get-title ${COMMAND})"
					echo "Music Duration: $(youtube-dl --get-duration ${COMMAND})"
				fi

				# Set music name (I'll use this to integrate with neofetch)
				if [[ ${SEARCH_MODE} == "NAME" ]]; then
					sed "s/NAME/$(youtube-dl --get-title ytsearch:"${COMMAND}")/g" <<<'{ "command": ["set_property", "name", "NAME"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
				else
					sed "s/NAME/$(youtube-dl --get-title ${COMMAND})/g" <<<'{ "command": ["set_property", "name", "NAME"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null
				fi
		fi
		
		# Loop
	    if [[ ${COMMAND} == "loop" ]]; then

				# Conditions to determine if loop will be enabled or disabled
				if [[ ! -f ${XDG_RUNTIME_DIR}/mpvloop ]]; then
					LOOP=yes
				elif [[ $(cat ${XDG_RUNTIME_DIR}/mpvloop) == "yes" ]]; then
					LOOP=no
				else
					LOOP=yes
				fi

				# Apply
				sed "s/STATE/${LOOP}/g" <<<'{ "command": ["set_property", "loop", "STATE"] }' | socat - ${XDG_RUNTIME_DIR}/mpvsocket > /dev/null

				# Save loop state
				echo ${LOOP} > ${XDG_RUNTIME_DIR}/mpvloop
				
				# Informs the user
				echo "Loop: ${LOOP}"

        fi
}

# Check if command is empty
if [[ -z ${COMMAND} ]]; then
		echo "You need to enter a music name/link or a command"
		exit
fi

# Check if mpv is playing anything
if [[ ${COMMAND} != *"play"* && ! $(pgrep -f mpv) ]]; then
		echo "No MPV process detected, first you need to run: music play <music name/link>"
		exit
fi

# Run command function
run_command
